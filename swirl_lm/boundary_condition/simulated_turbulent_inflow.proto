// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto2";

package research.simulation;

// Stores information required by the simulated turbulent inflow library.
// Next id: 8
message SimulatedTurbulentInflow {
  // Stores information required to generate the inflow.
  // Next id: 2
  message InflowGeneration {
    // Specifies the location in physical coordinates (i.e. in units of m) where
    // the 2D plane is obtained along `inflow_dim`.
    optional float location = 1;
  }

  // Stores information required to apply the inflow generated by another
  // simulation.
  // Next id: 5
  message InflowEnforcement {
    // Specifies the directory of the inflow data file.
    optional string inflow_data_dir = 1;

    // Specifies the prefix of the inflow data file.
    optional string inflow_data_prefix = 2;

    // Specifies the step where the inflow data file is loaded.
    optional int32 inflow_data_step = 3;

    // Specifies the face where inflow is coming from.
    optional int32 face = 4;
  }

  // Specifies the dimension of the inflow. A 2D plane perpendicular to this
  // dimension will be retrieved as the inflow.
  optional int32 inflow_dim = 1;

  // Specifies if the current simulation is for inflow generation or
  // enforcement.
  oneof operation {
    // The inflow handler is used for inflow data generation.
    InflowGeneration generation = 2;

    // The inflow handler is used for inflow boundary condition enforcement.
    InflowEnforcement enforcement = 3;
  }

  // Specifies the total number of time steps to be collected/loaded as the
  // inflow data. Needs to be fully divisible by the number of cores along the
  // inflow dimension.
  optional int32 nt = 4;

  // Specifies the index in terms of time step at which to start the inflow data
  // collection or boundary condition enforcement.
  optional int32 start_step_id = 5;

  // Specifies the interval of time between 2 consecutive inflow snapshots to be
  // collected/imposed as boundary condition in the inflow data.
  optional float delta_t = 6;

  // Specifies the names of scalars for which the inflow is collected/enforced.
  repeated string scalar = 7;
}
