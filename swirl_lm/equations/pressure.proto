// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto2";

package research.simulation;

import "swirl_lm/linalg/poisson_solver.proto";

// A library of parameters for solving the pressure equation.
// Next id: 7
message Pressure {
  // The option and parameters of the Poisson solver.
  optional PoissonSolver solver = 1;
  // The number of filter operations to be applied to dœ± / dt on the right hand
  // side of the Poisson equation for pressure correction. The default values is
  // from reference: Charles D. Pierce and Parviz Moin, Progress-variable
  // approach for large-eddy simulation of turbulent combustion. California,
  // USA: Stanford University, 2001.
  optional int32 num_d_rho_filter = 2 [default = 3];
  // A threshold for the rate change of density, i.e. the d rho / dt term, on
  // the right hand side of the pressure Poisson equation. If the relative
  // density change magnitude is smaller than `d_rho_rtol`, it's considered as
  // 0.
  optional float d_rho_rtol = 3 [default = 0.0];
  // An option for making OUTFLOW (homogenoeus Neuamnn boundary condition for
  // all velocity components) a pressure outlet. If this option is `true`, a
  // homogeneous Dirichlet boundary condition will be enforced for pressure
  // and its correction when an OUTLET boundary condition is detected. Default
  // set to `false` for backward compatibility.
  optional bool pressure_outlet = 4 [default = false];
  // An option for updating the pressure boundary condition based on the latest
  // flow field and its boundary condition. If this option is `true`, the user
  // specified boundary condition in the config file will be overwritten by
  // the derived quantities based on the momentum equation, i.e.
  // dp/dn = -convection + diffusion, where n is the direction normal to a
  // boundary. If this option is `false`, it will follow the boundary condition
  // specified in the config. Note that `pressure_outlet` option is not used
  // if the option of this parameter is `false`. Default set to `true` for
  // backward compatibility.
  optional bool update_p_bc_by_flow = 5 [default = true];
  // An option for the treatment of the pressure boundary condition at a wall
  // in the presence of gravity.
  enum VerticalBCTreatment {
    // Original implementation where pressure and buoyancy at the wall only
    // approximately balance. This is currently left as the default option so
    // as not to break existing simulations. New simulations should prefer the
    // option PRESSURE_BUOYANCY_BALANCING. Eventually, this option will be
    // removed.
    APPROXIMATE = 0;
    // Option where the BC is computed precisely to ensure balance of the
    // pressure and buoyancy force at the wall, to avoid spurious forcing of a
    // fluid from equilibrium.
    PRESSURE_BUOYANCY_BALANCING = 1;
  }
  optional VerticalBCTreatment vertical_bc_treatment = 6
      [default = APPROXIMATE];
}
