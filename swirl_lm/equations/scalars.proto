// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto2";

package research.simulation;

import "swirl_lm/numerics/numerics.proto";

// Defines the properties of a scalar to be included in the flow field.
// Next id: 16
message Scalar {
  // The name of the scalar.
  optional string name = 1;
  // The diffusivity of the scalar.
  optional float diffusivity = 2;
  // The density of the scalar, in units of kg/m^3. Setting default to 1.0
  // for a generic gas.
  optional float density = 3 [default = 1.0];
  // The molecular weight of the scalar, in units kg/mol. Setting default to
  // air for common uses that are not mixing or reacting.
  optional float molecular_weight = 4 [default = 0.02875];
  // An indicator for whether this scalar is solved in the flow system.
  // Default setting to true, which indicates that scalars included in the
  // textproto will be solved by default.
  optional bool solve_scalar = 5 [default = true];

  // The scheme to be used to discretize the convection term.
  optional ConvectionScheme scheme = 6 [default = CONVECTION_SCHEME_QUICK];
  // The scheme to be used for time advancement for a scalar, and if absent it
  // will fall back to the shared time integration scheme, specified in
  // `SwirlLMParameters`'s `time_integration_scheme`:
  // swirl_lm/base/parameters.proto
  optional TimeIntegrationScheme time_integration_scheme = 10;

  // A reference value for the scalar.
  optional float reference_value = 7 [deprecated = true];

  // Specifies a constant diffusive flux for the scalar if required.
  message DiffusiveFlux {
    // The dimension of the diffusive flux. Allowed values are 0, 1, and 2,
    // which corresponds to the x, y, and z directions, respectively.
    optional int32 dim = 1;
    // The face index of the diffusive flux. Should be one of 0 and 1, where 0
    // suggests the flux is on the lower end of `dim`, and 1 is on the higher
    // end of `dim`.
    optional int32 face = 3;
    // Specifies the value of the flux, or a variable name that stores the flux.
    oneof flux {
      // The value of the diffusive flux. This value will be applied on the
      // entire boundary.
      float value = 2;
      // The name of the variable in `additional_states` that specifies the
      // flux. It is required that the flux specified this way has to be a
      // plane that conforms with the dimension and representation of 3D flow
      // field variables. For example, for a face in dim 0, the flux variable
      // has to have a shape of (nz, 1, ny) or (nz, ny).
      string varname = 4;
    }
  }

  // The diffusive flux to be applied at specific boundaries.
  repeated DiffusiveFlux diffusive_flux = 11;

  // Configurations for specific scalars.
  oneof scalar_config {
    GenericScalar generic_scalar = 8;
    TotalEnergy total_energy = 9;
    Humidity humidity = 12;
    PotentialTemperature potential_temperature = 14;
  }

  // By default, the wall BC type (e.g. SLIP_WALL, NON_SLIP_WALL) used for
  // scalar transport convection term calculation is derived from velocity
  // BC. This allows the overriding of the derived BC for a specific scalar
  // in a specific dimension, on a specific face. This will set the BC type
  // to UNKNOWN, which affects the convection term calculation for this scalar
  // at the boundary, e.g. when the original boundary type is a wall.
  message OverrideBCType {
    // The dimension of the wall BC type to be overriden. Allowed values are 0,
    // 1, and 2, which corresponds to the x, y, and z directions, respectively.
    optional int32 dim = 1;
    // The face index of the wall BC type to be overriden. Should be one of 0
    // and 1, where 0 indicates the flux is on the lower end of `dim`, and 1 is
    // on the higher end of `dim`.
    optional int32 face = 2;
  }

  // Override the BC type for this scalar, which affects the convection term
  // calculation.
  repeated OverrideBCType override_bc_type = 15;
}

// Defines configurations for a generic scalar.
message GenericScalar {}

// Defines configurations for total energy.
// Next id: 6
message TotalEnergy {
  // An option of whether radiation is included in the total energy equation.
  optional bool include_radiation = 1;
  // An option of whether the effect of subsidence velocity is included in the
  // total energy equation.
  optional bool include_subsidence = 2;
}

// Defines configurations for total humidity.
// Next id: 7
message Humidity {
  // An option of whether the effect of subsidence velocity is included in the
  // total humidity equation.
  optional bool include_subsidence = 1;
}

// Defines configurations for the liquid-ice potential temperature.
// Next id: 7
message PotentialTemperature {
  // An option of whether radiation is included in the liquid-ice potential
  // temperature equation.
  optional bool include_radiation = 1;
  // An option of whether the effect of subsidence velocity is included in the
  // liquid-ice potential temperature equation.
  optional bool include_subsidence = 2;
}
